{{#each questions}}
  <div class="card my-3">
    <div class="card-body">
       <h3 class="card-title">
          <img src="{{#if author.profilePicture}}{{author.profilePicture}}{{else}}/images/default.jpg{{/if}}"
            alt="{{author.username}}'s profile picture" class="rounded-circle"
            style="width: 40px; height: 40px; object-fit: cover; margin-right: 10px;">
          Question: {{title}}
        </h3>
        <p class="card-text">{{description}}</p>
        <p class="card-text"><small class="text-muted">Asked by: {{author.username}} on {{createdAt}}</small></p>
        <div class="vote-container">
          <button class="upvote-button" data-question-id="{{this._id}}">Upvote</button>
          Upvotes:
          <span class="upvote-count" id="upvote-count-{{this._id}}">{{this.upvoteCount}}</span>
          <br>
          <button class="downvote-button" data-question-id="{{this._id}}">Downvote</button>
          Downvotes:
          <span class="downvote-count" id="downvote-count-{{this._id}}">{{this.downvoteCount}}</span>
      <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#answers-{{@index}}" aria-expanded="false" aria-controls="answers-{{@index}}">
        View question
      </button>
    </div>
    <div class="collapse" id="answers-{{@index}}">
      <div class="card card-body">
          {{#if acceptedAnswer}}
          {{#with (findAnswerById answers acceptedAnswer)}}
          <li class="media my-3">
            <img src="{{#if author.profilePicture}}{{author.profilePicture}}{{else}}/images/default.jpg{{/if}}"
              alt="{{author.username}}'s profile picture" class="rounded-circle mr-3"
              style="width: 40px; height: 40px; object-fit: cover;">
            <div class="media-body" style="border:1px solid rgb(112, 110, 110); border-radius: 5px; padding: 10px">
              <p>{{content}}</p>
              <p class="card-text"><small class="text-muted"><strong>Accepted Answer - Answered by: {{author.username}}
                    on {{createdAt}}</small></strong></p>
              {{#if (userIsAuthor ../user._id author._id)}}
              <form action="/answers/{{_id}}?_method=DELETE" method="POST"
                onsubmit="return confirm('Are you sure you want to delete this answer?');">
                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
              </form>
              {{/if}}
            </div>
          </li>
          {{/with}}
          {{/if}}
          {{#each answers}}
          <li class="media my-3" data-answer-id="{{_id}}">
            <img src="{{#if author.profilePicture}}{{author.profilePicture}}{{else}}/images/default.jpg{{/if}}"
              alt="{{author.username}}'s profile picture" class="rounded-circle mr-3"
              style="width: 40px; height: 40px; object-fit: cover;">
            <div class="media-body">
              <p>{{content}}</p>
              <p class="card-text"><small class="text-muted">Answered by: {{author.username}} on {{createdAt}}</small>
              </p>
              {{#if (userIsAuthor @root.user.id author._id)}}
              <button class="btn btn-sm btn-danger delete-answer" data-answer-id="{{_id}}">Delete</button>
              {{/if}}
            </div>
          </li>
          {{/each}}
      </div>
    </div>
  </div>
{{/each}}

<script>
      function findAnswerById(answers, id) {
        return answers.find(answer => answer._id === id);
      }
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
      $(document).ready(function () {

        $("form[id^='answer-form-']").on("submit", function (event) {
          event.preventDefault();

          const form = $(this);
          const questionId = form.attr("id").split("-")[2];
          const content = form.find("textarea[name='content']").val();

          $.ajax({
            type: "POST",
            url: form.attr("action"),
            data: { content, questionId },
            success: function (response) {
              const answer = response;
              const answerHTML = `
            <li>
              <p>${answer.content}</p>
              <p>Answered by: ${answer.author.username} on ${answer.createdAt}</p>
            </li>
          `;

              $("#answers-" + questionId).prepend(answerHTML);
              form.trigger("reset");
            },
            error: function (error) {
              console.error("Error submitting answer:", error);
            },
          });
        });

        $('.delete-answer').on('click', function () {
          const answerId = $(this).data('answer-id');
          const url = `/answers/${answerId}`;

          $.ajax({
            url: url,
            type: 'DELETE',
            success: function (result) {
              $(`li[data-answer-id=${answerId}]`).remove();
            },
            error: function (error) {
              console.error('Error deleting answer:', error);
            }
          });
        });

        function userHasUpvoted(upvotedBy, userId) {
          return upvotedBy.some(id => id === userId);
        }

        function userHasDownvoted(downvotedBy, userId) {
          return downvotedBy.some(id => id === userId);
        }

        const userId = '{{user._id}}';

        $('.card.my-3').each(function () {
          const upvotedBy = JSON.parse($(this).attr('data-upvoted-by'));
          const downvotedBy = JSON.parse($(this).attr('data-downvoted-by'));
          const questionId = $(this).attr('data-question-id');

          if (userHasUpvoted(upvotedBy, userId)) {
            $(this).find('.vote-container').append(`
          <form action="/questions/${questionId}/upvote/remove" method="post">
            <button type="submit">Remove Upvote</button>
          </form>
        `);
          } else {
            $(this).find('.vote-container').append(`
          <form action="/questions/${questionId}/upvote" method="post">
            <button type="submit">Upvote</button>
          </form>
        `);
          }

          if (userHasDownvoted(downvotedBy, userId)) {
            $(this).find('.vote-container').append(`
          <form action="/questions/${questionId}/downvote/remove" method="post">
            <button type="submit">Remove Downvote</button>
          </form>
        `);
          } else {
            $(this).find('.vote-container').append(`
          <form action="/questions/${questionId}/downvote" method="post">
            <button type="submit">Downvote</button>
          </form>
        `);
          }
        });



      });
    </script>
    <script>
      document.querySelectorAll(".upvote-button, .downvote-button").forEach((button) => {
        button.addEventListener("click", async (event) => {
          event.preventDefault();
          const isUpvote = event.target.classList.contains("upvote-button");
          const questionId = event.target.getAttribute("data-question-id");
          const response = await fetch(`/questions/${questionId}/${isUpvote ? "upvote" : "downvote"}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json",
            },
            credentials: "same-origin",
          });

          if (response.ok) {
            const { upvoteCount, downvoteCount } = await response.json();
            document.querySelector("#upvote-count-" + questionId).textContent = upvoteCount;
            document.querySelector("#downvote-count-" + questionId).textContent = downvoteCount;
          } else {
            console.error("Error updating vote count");
          }
        });
      });
    </script>
